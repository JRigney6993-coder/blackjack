<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Blackjack Game</title>
    <style>
        html,
        body {
            margin: 0;
            padding: 0;
            height: 100%;
            background: linear-gradient(to bottom, #260101, #5c0202);
        }

        #gameBoard {
            display: flex;
            flex-direction: row;
            width: 90%;
            height: 80%;
            border: 2px solid #6c3a3a;
            border-radius: 15px;
            color: #e8e6d1;
            margin: 5% auto;
        }

        #leftPanel {
            flex: 2;
            padding: 20px;
            display: flex;
            flex-direction: column;
            justify-content: space-between;
        }

        #rightPanel {
            flex: 1;
            padding: 20px;
            border-left: 2px solid #6c3a3a;
        }

        #dealer,
        #player {
            flex: 1;
            display: flex;
            flex-direction: column;
            align-items: center;
        }

        .title {
            font-size: 2em;
            margin-bottom: 20px;
        }

        .actions {
            display: flex;
            gap: 20px;
        }

        .btn {
            background-color: #6c3a3a;
            color: #e8e6d1;
            border: none;
            padding: 10px 15px;
            border-radius: 5px;
            cursor: pointer;
            transition: background-color 0.3s;
        }

        .leaderboard-list {
            list-style-type: none;
            padding: 0;
            margin-top: 20px;
        }

        .leaderboard-list li {
            padding: 10px 0;
            border-bottom: 1px solid #6c3a3a;
        }

        .leaderboard-list li:last-child {
            border-bottom: none;
        }

    
        #playerCards,
#dealerCards {
    display: flex;
    gap: 20px; 
    margin-bottom: 20px; 
}

.card {
    width: 60px; 
    height: 90px; 
    transition: transform 0.5s;
    transform-style: preserve-3d;
}

    .card img {
        width: 100%;
        height: 100%;
        backface-visibility: hidden;
    }

    .actions {
    display: flex;
    gap: 20px;
    margin-top: 20px; 
}

    </style>
</head>

<body>
    <div id="gameBoard">
        <div id="leftPanel">
            <!-- Dealer -->
            <div id="dealer">
                <div class="title">Dealer</div>
                <div id="dealerCards"></div>
            </div>

            <!-- Player -->
            <div id="player">
                <div class="title">Player</div>
                <div id="playerCards"></div>
                <div class="actions">
                    <button class="btn" onclick="hitPlayer()">Hit</button>
                    <button class="btn" onclick="stand()">Stand</button>
                </div>
            </div>
        </div>

        <!-- Leaderboard -->
        <div id="rightPanel">
            <div class="title">Leaderboard</div>
            <ul class="leaderboard-list">

            </ul>
        </div>
    </div>


    <script>
let playerHand = [];
let dealerHand = [];
let dealerTurn = false;

async function fetchTopPlayers() {
    const response = await fetch('http://localhost:4001/game/topPlayers');
    const players = await response.json();

    const leaderboard = document.querySelector('.leaderboard-list');
    leaderboard.innerHTML = '';

    players.forEach(player => {
        const li = document.createElement('li');
        li.textContent = `${player.first_name} ${player.last_name} - Score: ${player.difference}`;
        leaderboard.appendChild(li);
    });
}

async function setupDeck() {
    await fetch('http://localhost:4001/game/setupDeck');
}

async function dealCards() {
    const response = await fetch('http://localhost:4001/game/deal');
    const data = await response.json();

    playerHand = data.player;
    dealerHand = data.dealer;

    displayCards('playerCards', playerHand);
    displayCards('dealerCards', dealerHand, true);
}

function displayCards(containerId, cards, hideFirstCard = false) {
    const container = document.getElementById(containerId);
    container.innerHTML = '';

    cards.forEach((card, index) => {
        const cardDiv = document.createElement('div');
        cardDiv.className = 'card';

        const cardImg = document.createElement('img');
        cardImg.src = (hideFirstCard && index === 0) ? 
            "https://www.deckofcardsapi.com/static/img/back.png" :
            card.image;

        cardDiv.appendChild(cardImg);
        container.appendChild(cardDiv);

        if (hideFirstCard && index === 0) {
            cardDiv.setAttribute('data-hidden', 'true');
        }
    });
}

async function hitPlayer() {
    if (playerHand.length < 5) {
        const response = await fetch('http://localhost:4001/game/hit', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                hand: playerHand
            })
        });
        const newCard = await response.json();

        playerHand.push(newCard);
        displayCards('playerCards', playerHand);
    } else {
        alert("Maximum of 5 cards reached for player.");
    }
}

async function stand() {
    const dealerFirstCard = document.querySelector('#dealerCards .card[data-hidden="true"]');
    if (dealerFirstCard) {
        const cardImg = dealerFirstCard.querySelector('img');
        setTimeout(() => {
            cardImg.src = dealerHand[0].image;
            dealerFirstCard.classList.add('flip');
            dealerFirstCard.removeAttribute('data-hidden');
        }, 1000);
    }

    dealerTurn = true;
    while (dealerTurn) {
        if (calculateTotal(dealerHand) < 17 && dealerHand.length < 5) {
            await hitDealer();
        } else {
            dealerTurn = false;
        }
    }

    const winner = await determineWinner();
    alert(`The winner is: ${winner}`);
}

async function hitDealer() {
    if (dealerHand.length < 5) {
        const response = await fetch('http://localhost:4001/game/hit', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                hand: dealerHand
            })
        });
        const newCard = await response.json();

        dealerHand.push(newCard);
        displayCards('dealerCards', dealerHand);
    } else {
        dealerTurn = false;
    }
}

    async function determineWinner() {
        try {
            console.log(playerHand, dealerHand);
            const response = await fetch('http://localhost:4001/game/determineWinner', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    playerHand,
                    dealerHand
                })
            });

            if (!response.ok) {
                throw new Error(`Error ${response.status}: ${response.statusText}`);
            }

            const data = await response.json();
            return data.winner;
        } catch (error) {
            console.error("Error determining winner:", error);
            return "Error";
        }
    }


function calculateTotal(hand) {
    const cardValues = {
        '2': 2,
        '3': 3,
        '4': 4,
        '5': 5,
        '6': 6,
        '7': 7,
        '8': 8,
        '9': 9,
        '10': 10,
        'JACK': 10,
        'QUEEN': 10,
        'KING': 10,
        'ACE': 11
    };

    let total = 0;
    let aces = 0;

    for (let card of hand) {
        if (card.value === 'ACE') {
            total += cardValues['ACE'];
            aces++;
        } else {
            total += cardValues[card.value];
        }
    }

    while (total > 21 && aces > 0) {
        total -= 10;
        aces--;
    }

    return total;
}

setupDeck().then(dealCards);
fetchTopPlayers();


    </script>

</body>

</html>